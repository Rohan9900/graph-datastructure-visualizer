"use strict";
self["webpackHotUpdategraph_data_structure_visualizer"]("Graph-stories",{

/***/ "./stories/Graph.stories.js":
/*!**********************************!*\
  !*** ./stories/Graph.stories.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Primary: () => (/* binding */ Primary),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Graph */ "./stories/Graph.js");


// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Example/Graph",
  component: _Graph__WEBPACK_IMPORTED_MODULE_0__.GraphVisualizer,
  parameters: {
    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout
    canvasRef: null,
    data: {
      A: ["B", "C"],
      B: ["D", "E"],
      C: ["F"],
      D: ["F", "I"],
      E: ["G"],
      F: [],
      G: [],
      H: [],
      I: ["k"],
      J: [],
      K: ["J"]
    },
    isChange: true,
    startingPoint: "A",
    textColor: "black",
    mainHeight: 400,
    mainWidth: 1000
  },
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
  tags: ["autodocs"],
  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes
  argTypes: {
    backgroundColor: {
      control: "color"
    }
  },
  nodeShape: "circle"
});

// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
const Primary = {
  args: {
    canvasRef: null,
    data: {
      A: ["B", "C", "D", "E", "F", "G", "H"],
      B: ["D", "E"],
      C: ["F"],
      D: ["F", "I"],
      E: ["G"],
      F: ["J"],
      G: [],
      H: [],
      I: ["K"],
      J: ["L", "M"],
      K: ["J"],
      L: [],
      M: []
    },
    isChange: true,
    startingPoint: "A",
    textColor: "black",
    mainHeight: 400,
    mainWidth: 2000,
    nodeShape: "circle"
  }
};
Primary.parameters = {
  ...Primary.parameters,
  docs: {
    ...Primary.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    canvasRef: null,\n    data: {\n      A: [\"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"],\n      B: [\"D\", \"E\"],\n      C: [\"F\"],\n      D: [\"F\", \"I\"],\n      E: [\"G\"],\n      F: [\"J\"],\n      G: [],\n      H: [],\n      I: [\"K\"],\n      J: [\"L\", \"M\"],\n      K: [\"J\"],\n      L: [],\n      M: []\n    },\n    isChange: true,\n    startingPoint: \"A\",\n    textColor: \"black\",\n    mainHeight: 400,\n    mainWidth: 2000,\n    nodeShape: \"circle\"\n  }\n}",
      ...Primary.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["Primary"];

/***/ }),

/***/ "./stories/Graph.js":
/*!**************************!*\
  !*** ./stories/Graph.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraphVisualizer: () => (/* binding */ GraphVisualizer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");


function GraphVisualizer({
  canvasRef,
  data,
  isChange,
  startingPoint,
  textColor,
  mainHeight,
  mainWidth,
  nodeShape // New prop for determining node shape
}) {
  if (!canvasRef) {
    canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  }
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    let pos = {};
    let connections = {};
    let visited = {};
    recurseGraph(visited, startingPoint, 100, 300, ctx, pos, connections, canvas);
  }, [isChange]);
  const recurseGraph = (vis, node, x, y, ctx, pos, connections, canvas) => {
    if (!vis[node]) {
      const nodeSize = nodeShape === "circle" ? 20 : 100; // Define the size of nodes
      const nodeRadius = nodeSize / 2;
      if (x < nodeSize / 2) x = nodeSize / 2;
      if (x > canvas.width - nodeSize / 2) x = canvas.width - nodeSize / 2;
      if (y < nodeSize / 2) y = nodeSize / 2;
      if (y > canvas.height - nodeSize / 2) y = canvas.height - nodeSize / 2;
      if (nodeShape === "circle") {
        ctx.beginPath();
        ctx.arc(x, y, nodeRadius, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.fill();
      } else {
        ctx.strokeRect(x - nodeRadius, y - nodeRadius, nodeSize, nodeSize);
      }
      ctx.fillStyle = textColor;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(node, x, y);
      pos[node] = {
        x: x,
        y: y
      };
      vis[node] = true;
      const neighbors = data[node];
      const neighborCount = neighbors.length;
      let yOffset = -(neighborCount - 1) * 50;
      for (let i = 0; i < neighborCount; i++) {
        const neighbor = neighbors[i];
        const newX = x + 200;
        const newY = y + yOffset;
        if (!connections[`${node}-${neighbor}`] && !connections[`${neighbor}-${node}`]) {
          ctx.beginPath();
          ctx.moveTo(x + nodeRadius, y);
          ctx.lineTo(pos[neighbor] ? pos[neighbor].x - nodeRadius : newX - nodeRadius, pos[neighbor] ? pos[neighbor].y : newY);
          ctx.stroke();
          connections[`${node}-${neighbor}`] = true;
        }
        recurseGraph(vis, neighbor, newX, newY, ctx, pos, connections, canvas);
        yOffset += 100;
      }
    }
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("canvas", {
    ref: canvasRef,
    width: mainWidth,
    height: mainHeight
  });
}
GraphVisualizer.displayName = "GraphVisualizer";
GraphVisualizer.defaultProps = {
  mainHeight: 400,
  mainWidth: 500,
  textColor: "black",
  data: {},
  nodeShape: "rectangle" // Default node shape is rectangle
};
GraphVisualizer.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "GraphVisualizer",
  "props": {
    "mainHeight": {
      "defaultValue": {
        "value": "400",
        "computed": false
      },
      "required": false
    },
    "mainWidth": {
      "defaultValue": {
        "value": "500",
        "computed": false
      },
      "required": false
    },
    "textColor": {
      "defaultValue": {
        "value": "\"black\"",
        "computed": false
      },
      "required": false
    },
    "data": {
      "defaultValue": {
        "value": "{}",
        "computed": false
      },
      "required": false
    },
    "nodeShape": {
      "defaultValue": {
        "value": "\"rectangle\"",
        "computed": false
      },
      "required": false
    }
  }
};

/***/ })

});
//# sourceMappingURL=Graph-stories.c9f419275499facfc43d.hot-update.js.map