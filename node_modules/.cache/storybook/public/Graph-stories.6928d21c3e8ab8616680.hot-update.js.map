{"version":3,"file":"Graph-stories.6928d21c3e8ab8616680.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAnHA;AAqHA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA","sources":["webpack://graph-data-structure-visualizer/./stories/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nexport function GraphVisualizer({\n  isChange,\n  startingPoint,\n  textColor,\n  data,\n  mainWidth,\n  mainHeight,\n}) {\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const scaleFactor = 1.5;\n  const canvasWidth = 8000;\n  const canvasHeight = 6000;\n  let canvasX = 0;\n  let canvasY = 0;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    contextRef.current = context;\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    drawCanvas();\n  }, [isChange]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = contextRef.current;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    recurseGraph(startingPoint, 100, 300, context, {});\n  };\n\n  const recurseGraph = (node, x, y, ctx, pos) => {\n    const width = 100;\n    const height = 30;\n\n    ctx.strokeRect(x - width / 2, y - height / 2, width, height);\n    ctx.fillStyle = textColor;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(node, x, y);\n\n    pos[node] = { x: x, y: y };\n\n    const neighbors = data[node];\n    const neighborCount = neighbors.length;\n    let yOffset = -(neighborCount - 1) * 50;\n\n    for (let i = 0; i < neighborCount; i++) {\n      const neighbor = neighbors[i];\n      const newX = x + 200;\n      const newY = y + yOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(x + width / 2, y);\n      ctx.lineTo(\n        pos[neighbor] ? pos[neighbor].x - width / 2 : newX - width / 2,\n        pos[neighbor] ? pos[neighbor].y : newY\n      );\n      ctx.stroke();\n\n      recurseGraph(neighbor, newX, newY, ctx, pos);\n      yOffset += 200;\n    }\n  };\n\n  const handleMouseMove = (e) => {\n    if (e.buttons === 1) {\n      canvasX -= e.movementX;\n      canvasY -= e.movementY;\n      drawCanvas();\n    }\n  };\n\n  const handleWheel = (e) => {\n    e.preventDefault();\n\n    const delta = Math.sign(e.deltaY);\n    const zoomAmount = delta > 0 ? scaleFactor : 1 / scaleFactor;\n    const canvas = canvasRef.current;\n\n    const canvasRect = canvas.getBoundingClientRect();\n    const mouseX = e.clientX - canvasRect.left;\n    const mouseY = e.clientY - canvasRect.top;\n\n    const canvasXBeforeZoom = canvasX + mouseX;\n    const canvasYBeforeZoom = canvasY + mouseY;\n\n    canvasX = (canvasXBeforeZoom - mouseX) * zoomAmount + mouseX;\n    canvasY = (canvasYBeforeZoom - mouseY) * zoomAmount + mouseY;\n\n    canvasX = Math.max(canvasX, 0);\n    canvasY = Math.max(canvasY, 0);\n\n    canvas.width = canvasWidth * scaleFactor;\n    canvas.height = canvasHeight * scaleFactor;\n\n    drawCanvas();\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      style={{ overflow: \"hidden\", width: \"100%\", height: \"100%\" }}\n      onMouseMove={handleMouseMove}\n      onWheel={handleWheel}\n    >\n      <canvas ref={canvasRef} />\n    </div>\n  );\n}\n\nGraphVisualizer.defaultProps = {\n  mainHeight: 400,\n  mainWidth: 500,\n  textColor: \"black\",\n  data: {},\n};\n\nexport default GraphVisualizer;\n"],"names":[],"sourceRoot":""}