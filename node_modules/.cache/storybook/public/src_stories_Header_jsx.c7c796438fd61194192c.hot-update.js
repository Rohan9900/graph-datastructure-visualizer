"use strict";
self["webpackHotUpdategraph_data_structure_visualizer"]("src_stories_Header_jsx",{

/***/ "./src/stories/Button.jsx":
/*!********************************!*\
  !*** ./src/stories/Button.jsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GraphVisualizer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");




function GraphVisualizer({
  canvasRef,
  data,
  isChange,
  startingPoint,
  textColor,
  mainHeight,
  mainWidth
}) {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    /* -------------------------------------------------------------------------- */
    /*                             initializing canvas                            */
    /* -------------------------------------------------------------------------- */
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    /* -------------------------------------------------------------------------- */
    /*                 creating a canvas of some height and width                 */
    /* -------------------------------------------------------------------------- */
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    let pos = {};
    let connections = {};
    let visited = {};

    /* -------------------------------------------------------------------------- */
    /*                          recursing graph with dfs                          */
    /* -------------------------------------------------------------------------- */
    recurseGraph(visited, startingPoint, 100, 150, ctx, pos, connections);
  }, [isChange]);
  const recurseGraph = (vis, node, x, y, ctx, pos, connections) => {
    if (!vis[node]) {
      const width = 100; // Rectangle width
      const height = 30; // Rectangle height

      ctx.strokeRect(x - width / 2, y - height / 2, width, height);
      ctx.fillStyle = textColor;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText(node, x, y);
      pos[node] = {
        x: x,
        y: y
      };
      vis[node] = true;
      const neighbors = data[node];
      const neighborCount = neighbors.length;
      let yOffset = -(neighborCount - 1) * 50;
      for (let i = 0; i < neighborCount; i++) {
        const neighbor = neighbors[i];
        const newX = x + 200;
        const newY = y + yOffset;
        if (!connections[`${node}-${neighbor}`] && !connections[`${neighbor}-${node}`]) {
          ctx.beginPath();
          ctx.moveTo(x + width / 2, y);
          ctx.lineTo(pos[neighbor] ? pos[neighbor].x - width / 2 : newX - width / 2, pos[neighbor] ? pos[neighbor].y : newY);
          ctx.stroke();
          connections[`${node}-${neighbor}`] = true;
        }
        recurseGraph(vis, neighbor, newX, newY, ctx, pos, connections);
        yOffset += 100;
      }
    }
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("canvas", {
    ref: canvasRef,
    width: mainWidth,
    height: mainHeight
  });
}
GraphVisualizer.displayName = "GraphVisualizer";
GraphVisualizer.propTypes = {
  canvasRef: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func).isRequired,
  data: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().object).isRequired,
  isChange: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().bool).isRequired,
  startingPoint: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
  textColor: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
  mainHeight: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number).isRequired,
  mainWidth: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().number).isRequired
};
Button.defaultProps = {
  mainHeight: 400,
  mainWidth: 500,
  textColor: "black",
  data: {}
};
GraphVisualizer.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "GraphVisualizer",
  "props": {
    "canvasRef": {
      "description": "",
      "type": {
        "name": "func"
      },
      "required": true
    },
    "data": {
      "description": "",
      "type": {
        "name": "object"
      },
      "required": true
    },
    "isChange": {
      "description": "",
      "type": {
        "name": "bool"
      },
      "required": true
    },
    "startingPoint": {
      "description": "",
      "type": {
        "name": "string"
      },
      "required": true
    },
    "textColor": {
      "description": "",
      "type": {
        "name": "string"
      },
      "required": true
    },
    "mainHeight": {
      "description": "",
      "type": {
        "name": "number"
      },
      "required": true
    },
    "mainWidth": {
      "description": "",
      "type": {
        "name": "number"
      },
      "required": true
    }
  }
};

/***/ })

});
//# sourceMappingURL=src_stories_Header_jsx.c7c796438fd61194192c.hot-update.js.map