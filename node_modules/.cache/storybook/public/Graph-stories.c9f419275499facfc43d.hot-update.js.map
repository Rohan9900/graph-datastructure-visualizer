{"version":3,"file":"Graph-stories.c9f419275499facfc43d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AApFA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://graph-data-structure-visualizer/./stories/Graph.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nexport function GraphVisualizer({\n  canvasRef,\n  data,\n  isChange,\n  startingPoint,\n  textColor,\n  mainHeight,\n  mainWidth,\n  nodeShape, // New prop for determining node shape\n}) {\n  if (!canvasRef) {\n    canvasRef = useRef(null);\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    let pos = {};\n    let connections = {};\n    let visited = {};\n\n    recurseGraph(visited, startingPoint, 100, 300, ctx, pos, connections, canvas);\n\n  }, [isChange]);\n\n  const recurseGraph = (vis, node, x, y, ctx, pos, connections, canvas) => {\n    if (!vis[node]) {\n      const nodeSize = nodeShape === \"circle\" ? 20 : 100; // Define the size of nodes\n      const nodeRadius = nodeSize / 2;\n\n      if (x < nodeSize / 2) x = nodeSize / 2;\n      if (x > canvas.width - nodeSize / 2) x = canvas.width - nodeSize / 2;\n      if (y < nodeSize / 2) y = nodeSize / 2;\n      if (y > canvas.height - nodeSize / 2) y = canvas.height - nodeSize / 2;\n\n      if (nodeShape === \"circle\") {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeRadius, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.fill();\n      } else {\n        ctx.strokeRect(x - nodeRadius, y - nodeRadius, nodeSize, nodeSize);\n      }\n\n      ctx.fillStyle = textColor;\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(node, x, y);\n\n      pos[node] = { x: x, y: y };\n\n      vis[node] = true;\n      const neighbors = data[node];\n      const neighborCount = neighbors.length;\n      let yOffset = -(neighborCount - 1) * 50;\n\n      for (let i = 0; i < neighborCount; i++) {\n        const neighbor = neighbors[i];\n        const newX = x + 200;\n        const newY = y + yOffset;\n\n        if (\n          !connections[`${node}-${neighbor}`] &&\n          !connections[`${neighbor}-${node}`]\n        ) {\n          ctx.beginPath();\n          ctx.moveTo(x + nodeRadius, y);\n          ctx.lineTo(\n            pos[neighbor] ? pos[neighbor].x - nodeRadius : newX - nodeRadius,\n            pos[neighbor] ? pos[neighbor].y : newY\n          );\n          ctx.stroke();\n          connections[`${node}-${neighbor}`] = true;\n        }\n\n        recurseGraph(vis, neighbor, newX, newY, ctx, pos, connections, canvas);\n        yOffset += 100;\n      }\n    }\n  };\n\n  return <canvas ref={canvasRef} width={mainWidth} height={mainHeight} />;\n}\n\nGraphVisualizer.defaultProps = {\n  mainHeight: 400,\n  mainWidth: 500,\n  textColor: \"black\",\n  data: {},\n  nodeShape: \"rectangle\", // Default node shape is rectangle\n};\n"],"names":[],"sourceRoot":""}