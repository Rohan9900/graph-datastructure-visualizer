{"version":3,"file":"src_stories_Header_jsx.c7c796438fd61194192c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAzEA;AA2EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://graph-data-structure-visualizer/./src/stories/Button.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { useEffect } from \"react\";\n\nexport default function GraphVisualizer({\n  canvasRef,\n  data,\n  isChange,\n  startingPoint,\n  textColor,\n  mainHeight,\n  mainWidth,\n}) {\n  useEffect(() => {\n    /* -------------------------------------------------------------------------- */\n    /*                             initializing canvas                            */\n    /* -------------------------------------------------------------------------- */\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    /* -------------------------------------------------------------------------- */\n    /*                 creating a canvas of some height and width                 */\n    /* -------------------------------------------------------------------------- */\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    let pos = {};\n    let connections = {};\n    let visited = {};\n\n    /* -------------------------------------------------------------------------- */\n    /*                          recursing graph with dfs                          */\n    /* -------------------------------------------------------------------------- */\n    recurseGraph(visited, startingPoint, 100, 150, ctx, pos, connections);\n  }, [isChange]);\n\n  const recurseGraph = (vis, node, x, y, ctx, pos, connections) => {\n    if (!vis[node]) {\n      const width = 100; // Rectangle width\n      const height = 30; // Rectangle height\n\n      ctx.strokeRect(x - width / 2, y - height / 2, width, height);\n      ctx.fillStyle = textColor;\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(node, x, y);\n\n      pos[node] = { x: x, y: y };\n\n      vis[node] = true;\n      const neighbors = data[node];\n      const neighborCount = neighbors.length;\n      let yOffset = -(neighborCount - 1) * 50;\n\n      for (let i = 0; i < neighborCount; i++) {\n        const neighbor = neighbors[i];\n        const newX = x + 200;\n        const newY = y + yOffset;\n\n        if (\n          !connections[`${node}-${neighbor}`] &&\n          !connections[`${neighbor}-${node}`]\n        ) {\n          ctx.beginPath();\n          ctx.moveTo(x + width / 2, y);\n          ctx.lineTo(\n            pos[neighbor] ? pos[neighbor].x - width / 2 : newX - width / 2,\n            pos[neighbor] ? pos[neighbor].y : newY\n          );\n          ctx.stroke();\n          connections[`${node}-${neighbor}`] = true;\n        }\n\n        recurseGraph(vis, neighbor, newX, newY, ctx, pos, connections);\n        yOffset += 100;\n      }\n    }\n  };\n  return <canvas ref={canvasRef} width={mainWidth} height={mainHeight} />;\n}\n\nGraphVisualizer.propTypes = {\n  canvasRef: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired,\n  isChange: PropTypes.bool.isRequired,\n  startingPoint: PropTypes.string.isRequired,\n  textColor: PropTypes.string.isRequired,\n  mainHeight: PropTypes.number.isRequired,\n  mainWidth: PropTypes.number.isRequired,\n};\n\nButton.defaultProps = {\n  mainHeight: 400,\n  mainWidth: 500,\n  textColor: \"black\",\n  data: {},\n};\n"],"names":[],"sourceRoot":""}